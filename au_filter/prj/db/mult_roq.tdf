--lpm_mult CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEDICATED_MULTIPLIER_CIRCUITRY="NO" DEVICE_FAMILY="Cyclone IV E" DSP_BLOCK_BALANCING="Auto" LPM_REPRESENTATION="SIGNED" LPM_WIDTHA=17 LPM_WIDTHB=29 LPM_WIDTHP=46 MAXIMIZE_SPEED=9 dataa datab result CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48
--VERSION_BEGIN 17.1 cbx_cycloneii 2017:10:25:18:06:53:SJ cbx_lpm_add_sub 2017:10:25:18:06:53:SJ cbx_lpm_mult 2017:10:25:18:06:53:SJ cbx_mgl 2017:10:25:18:08:29:SJ cbx_nadder 2017:10:25:18:06:53:SJ cbx_padd 2017:10:25:18:06:53:SJ cbx_stratix 2017:10:25:18:06:53:SJ cbx_stratixii 2017:10:25:18:06:53:SJ cbx_util_mgl 2017:10:25:18:06:53:SJ  VERSION_END


-- Copyright (C) 2017  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details.


FUNCTION carry_sum (cin, sin)
RETURNS ( cout, sout);
FUNCTION lcell (in)
RETURNS ( out);
FUNCTION soft (in)
RETURNS ( out);

--synthesis_resources = lut 571 
SUBDESIGN mult_roq
( 
	dataa[16..0]	:	input;
	datab[28..0]	:	input;
	result[45..0]	:	output;
) 
VARIABLE
	add12_result[45..0]	:	WIRE;
	add16_result[42..0]	:	WIRE;
	add20_result[39..0]	:	WIRE;
	add24_result[35..0]	:	WIRE;
	add28_result[29..0]	:	WIRE;
	add32_result[25..0]	:	WIRE;
	add36_result[27..0]	:	WIRE;
	add40_result[19..0]	:	WIRE;
	add44_result[15..0]	:	WIRE;
	cs1a[8..0] : carry_sum;
	cs3a[7..0] : carry_sum;
	le10a[29..0] : lcell;
	le11a[29..0] : lcell;
	le2a[28..0] : lcell;
	le4a[29..0] : lcell;
	le5a[29..0] : lcell;
	le6a[29..0] : lcell;
	le7a[29..0] : lcell;
	le8a[29..0] : lcell;
	le9a[29..0] : lcell;
	sft13a[45..0] : soft;
	sft14a[45..0] : soft;
	sft15a[45..0] : soft;
	sft17a[42..0] : soft;
	sft18a[42..0] : soft;
	sft19a[42..0] : soft;
	sft21a[39..0] : soft;
	sft22a[39..0] : soft;
	sft23a[39..0] : soft;
	sft25a[35..0] : soft;
	sft26a[35..0] : soft;
	sft27a[35..0] : soft;
	sft29a[29..0] : soft;
	sft30a[29..0] : soft;
	sft31a[29..0] : soft;
	sft33a[25..0] : soft;
	sft34a[25..0] : soft;
	sft35a[25..0] : soft;
	sft37a[27..0] : soft;
	sft38a[27..0] : soft;
	sft39a[27..0] : soft;
	sft41a[19..0] : soft;
	sft42a[19..0] : soft;
	sft43a[19..0] : soft;
	sft45a[15..0] : soft;
	sft46a[15..0] : soft;
	sft47a[15..0] : soft;
	dataa_node[28..0]	: WIRE;
	datab_node[16..0]	: WIRE;
	final_result_node[45..0]	: WIRE;
	w1024w	: WIRE;
	w12w[28..0]	: WIRE;
	w1863w[45..0]	: WIRE;
	w284w[29..0]	: WIRE;
	w362w[29..0]	: WIRE;
	w437w[29..0]	: WIRE;
	w526w[29..0]	: WIRE;
	w615w[29..0]	: WIRE;
	w704w[29..0]	: WIRE;
	w793w[29..0]	: WIRE;
	w7w[17..0]	: WIRE;
	w882w[29..0]	: WIRE;
	w971w	: WIRE;

BEGIN 
	add12_result[] = sft13a[].out + sft14a[].out;
	add16_result[] = sft17a[].out + sft18a[].out;
	add20_result[] = sft21a[].out + sft22a[].out;
	add24_result[] = sft25a[].out + sft26a[].out;
	add28_result[] = sft29a[].out + sft30a[].out;
	add32_result[] = sft33a[].out + sft34a[].out;
	add36_result[] = sft37a[].out + sft38a[].out;
	add40_result[] = sft41a[].out + sft42a[].out;
	add44_result[] = sft45a[].out + sft46a[].out;
	cs1a[].cin = ( B"0", ((w7w[14..14] & cs1a[6].cout) # w7w[15..15]), ((w7w[12..12] & cs1a[5].cout) # w7w[13..13]), ((w7w[10..10] & cs1a[4].cout) # w7w[11..11]), ((w7w[8..8] & cs1a[3].cout) # w7w[9..9]), ((w7w[6..6] & cs1a[2].cout) # w7w[7..7]), ((w7w[4..4] & cs1a[1].cout) # w7w[5..5]), ((w7w[2..2] & cs1a[0].cout) # w7w[3..3]), w7w[1..1]);
	cs1a[].sin = ( cs1a[7].cout, ((((((! w7w[15..15]) & w7w[14..14]) & cs1a[6].cout) # ((w7w[15..15] & w7w[14..14]) & (! cs1a[6].cout))) # ((w7w[15..15] & (! w7w[14..14])) & cs1a[6].cout)) # ((w7w[15..15] & (! w7w[14..14])) & (! cs1a[6].cout))), ((((((! w7w[13..13]) & w7w[12..12]) & cs1a[5].cout) # ((w7w[13..13] & w7w[12..12]) & (! cs1a[5].cout))) # ((w7w[13..13] & (! w7w[12..12])) & cs1a[5].cout)) # ((w7w[13..13] & (! w7w[12..12])) & (! cs1a[5].cout))), ((((((! w7w[11..11]) & w7w[10..10]) & cs1a[4].cout) # ((w7w[11..11] & w7w[10..10]) & (! cs1a[4].cout))) # ((w7w[11..11] & (! w7w[10..10])) & cs1a[4].cout)) # ((w7w[11..11] & (! w7w[10..10])) & (! cs1a[4].cout))), ((((((! w7w[9..9]) & w7w[8..8]) & cs1a[3].cout) # ((w7w[9..9] & w7w[8..8]) & (! cs1a[3].cout))) # ((w7w[9..9] & (! w7w[8..8])) & cs1a[3].cout)) # ((w7w[9..9] & (! w7w[8..8])) & (! cs1a[3].cout))), ((((((! w7w[7..7]) & w7w[6..6]) & cs1a[2].cout) # ((w7w[7..7] & w7w[6..6]) & (! cs1a[2].cout))) # ((w7w[7..7] & (! w7w[6..6])) & cs1a[2].cout)) # ((w7w[7..7] & (! w7w[6..6])) & (! cs1a[2].cout))), ((((((! w7w[5..5]) & w7w[4..4]) & cs1a[1].cout) # ((w7w[5..5] & w7w[4..4]) & (! cs1a[1].cout))) # ((w7w[5..5] & (! w7w[4..4])) & cs1a[1].cout)) # ((w7w[5..5] & (! w7w[4..4])) & (! cs1a[1].cout))), ((((((! w7w[3..3]) & w7w[2..2]) & cs1a[0].cout) # ((w7w[3..3] & w7w[2..2]) & (! cs1a[0].cout))) # ((w7w[3..3] & (! w7w[2..2])) & cs1a[0].cout)) # ((w7w[3..3] & (! w7w[2..2])) & (! cs1a[0].cout))), w7w[1..1]);
	cs3a[].cin = ( ((w7w[14..14] & cs3a[6].cout) # w7w[15..15]), ((w7w[12..12] & cs3a[5].cout) # w7w[13..13]), ((w7w[10..10] & cs3a[4].cout) # w7w[11..11]), ((w7w[8..8] & cs3a[3].cout) # w7w[9..9]), ((w7w[6..6] & cs3a[2].cout) # w7w[7..7]), ((w7w[4..4] & cs3a[1].cout) # w7w[5..5]), ((w7w[2..2] & cs3a[0].cout) # w7w[3..3]), w7w[1..1]);
	cs3a[].sin = ( ((((((! w7w[15..15]) & (! w7w[14..14])) & cs3a[6].cout) # (((! w7w[15..15]) & w7w[14..14]) & (! cs3a[6].cout))) # ((w7w[15..15] & w7w[14..14]) & (! cs3a[6].cout))) # ((w7w[15..15] & (! w7w[14..14])) & cs3a[6].cout)), ((((((! w7w[13..13]) & (! w7w[12..12])) & cs3a[5].cout) # (((! w7w[13..13]) & w7w[12..12]) & (! cs3a[5].cout))) # ((w7w[13..13] & w7w[12..12]) & (! cs3a[5].cout))) # ((w7w[13..13] & (! w7w[12..12])) & cs3a[5].cout)), ((((((! w7w[11..11]) & (! w7w[10..10])) & cs3a[4].cout) # (((! w7w[11..11]) & w7w[10..10]) & (! cs3a[4].cout))) # ((w7w[11..11] & w7w[10..10]) & (! cs3a[4].cout))) # ((w7w[11..11] & (! w7w[10..10])) & cs3a[4].cout)), ((((((! w7w[9..9]) & (! w7w[8..8])) & cs3a[3].cout) # (((! w7w[9..9]) & w7w[8..8]) & (! cs3a[3].cout))) # ((w7w[9..9] & w7w[8..8]) & (! cs3a[3].cout))) # ((w7w[9..9] & (! w7w[8..8])) & cs3a[3].cout)), ((((((! w7w[7..7]) & (! w7w[6..6])) & cs3a[2].cout) # (((! w7w[7..7]) & w7w[6..6]) & (! cs3a[2].cout))) # ((w7w[7..7] & w7w[6..6]) & (! cs3a[2].cout))) # ((w7w[7..7] & (! w7w[6..6])) & cs3a[2].cout)), ((((((! w7w[5..5]) & (! w7w[4..4])) & cs3a[1].cout) # (((! w7w[5..5]) & w7w[4..4]) & (! cs3a[1].cout))) # ((w7w[5..5] & w7w[4..4]) & (! cs3a[1].cout))) # ((w7w[5..5] & (! w7w[4..4])) & cs3a[1].cout)), ((((((! w7w[3..3]) & (! w7w[2..2])) & cs3a[0].cout) # (((! w7w[3..3]) & w7w[2..2]) & (! cs3a[0].cout))) # ((w7w[3..3] & w7w[2..2]) & (! cs3a[0].cout))) # ((w7w[3..3] & (! w7w[2..2])) & cs3a[0].cout)), w7w[0..0]);
	le10a[].in = (! ((! (((! ( dataa_node[], B"0")) & cs1a[6].sout) & (! cs3a[6].sout))) & (! ((((! ( dataa_node[28..28], dataa_node[])) & cs1a[6].sout) & cs3a[6].sout) # ((( dataa_node[28..28], dataa_node[]) & (! cs1a[6].sout)) & cs3a[6].sout)))));
	le11a[].in = (! ((! (((! ( dataa_node[], B"0")) & cs1a[7].sout) & (! cs3a[7].sout))) & (! ((((! ( dataa_node[28..28], dataa_node[])) & cs1a[7].sout) & cs3a[7].sout) # ((( dataa_node[28..28], dataa_node[]) & (! cs1a[7].sout)) & cs3a[7].sout)))));
	le2a[].in = (((w7w[16..16] & cs1a[8].sout) # ((w7w[16..16] & (! cs1a[8].sout)) & (! dataa_node[]))) # (((! w7w[16..16]) & cs1a[8].sout) & dataa_node[]));
	le4a[].in = (! ((! (((! ( dataa_node[], B"0")) & cs1a[0].sout) & (! cs3a[0].sout))) & (! ((((! ( dataa_node[28..28], dataa_node[])) & cs1a[0].sout) & cs3a[0].sout) # ((( dataa_node[28..28], dataa_node[]) & (! cs1a[0].sout)) & cs3a[0].sout)))));
	le5a[].in = (! ((! (((! ( dataa_node[], B"0")) & cs1a[1].sout) & (! cs3a[1].sout))) & (! ((((! ( dataa_node[28..28], dataa_node[])) & cs1a[1].sout) & cs3a[1].sout) # ((( dataa_node[28..28], dataa_node[]) & (! cs1a[1].sout)) & cs3a[1].sout)))));
	le6a[].in = (! ((! (((! ( dataa_node[], B"0")) & cs1a[2].sout) & (! cs3a[2].sout))) & (! ((((! ( dataa_node[28..28], dataa_node[])) & cs1a[2].sout) & cs3a[2].sout) # ((( dataa_node[28..28], dataa_node[]) & (! cs1a[2].sout)) & cs3a[2].sout)))));
	le7a[].in = (! ((! (((! ( dataa_node[], B"0")) & cs1a[3].sout) & (! cs3a[3].sout))) & (! ((((! ( dataa_node[28..28], dataa_node[])) & cs1a[3].sout) & cs3a[3].sout) # ((( dataa_node[28..28], dataa_node[]) & (! cs1a[3].sout)) & cs3a[3].sout)))));
	le8a[].in = (! ((! (((! ( dataa_node[], B"0")) & cs1a[4].sout) & (! cs3a[4].sout))) & (! ((((! ( dataa_node[28..28], dataa_node[])) & cs1a[4].sout) & cs3a[4].sout) # ((( dataa_node[28..28], dataa_node[]) & (! cs1a[4].sout)) & cs3a[4].sout)))));
	le9a[].in = (! ((! (((! ( dataa_node[], B"0")) & cs1a[5].sout) & (! cs3a[5].sout))) & (! ((((! ( dataa_node[28..28], dataa_node[])) & cs1a[5].sout) & cs3a[5].sout) # ((( dataa_node[28..28], dataa_node[]) & (! cs1a[5].sout)) & cs3a[5].sout)))));
	sft13a[].in = ( w971w, ( (! w12w[28..28]), ( sft19a[41..41].out, ( sft19a[40..40].out, ( sft19a[39..39].out, ( sft19a[38..38].out, ( sft19a[37..37].out, ( sft19a[36..36].out, ( sft19a[35..35].out, ( sft19a[34..34].out, ( sft19a[33..33].out, ( sft19a[32..32].out, ( sft19a[31..31].out, ( sft19a[30..30].out, ( sft19a[29..29].out, ( sft19a[28..28].out, ( sft19a[27..27].out, ( sft19a[26..26].out, ( sft19a[25..25].out, ( sft19a[24..24].out, ( sft19a[23..23].out, ( sft19a[22..22].out, ( sft19a[21..21].out, ( sft19a[20..20].out, ( sft19a[19..19].out, ( sft19a[18..18].out, ( sft19a[17..17].out, ( sft19a[16..16].out, ( sft19a[15..15].out, ( sft19a[14..14].out, ( sft19a[13..13].out, ( sft19a[12..12].out, ( sft19a[11..11].out, ( sft19a[10..10].out, ( sft19a[9..9].out, ( sft19a[8..8].out, ( sft19a[7..7].out, ( sft19a[6..6].out, ( sft19a[5..5].out, ( sft19a[4..4].out, ( sft19a[3..3].out, ( sft19a[2..2].out, ( le5a[1..1].out, ( le5a[0..0].out, ( le4a[1..0].out)))))))))))))))))))))))))))))))))))))))))))));
	sft14a[].in = ( w1024w, ( sft19a[42..42].out, ( sft23a[39..39].out, ( sft23a[38..38].out, ( sft23a[37..37].out, ( sft23a[36..36].out, ( sft23a[35..35].out, ( sft23a[34..34].out, ( sft23a[33..33].out, ( sft23a[32..32].out, ( sft23a[31..31].out, ( sft23a[30..30].out, ( sft23a[29..29].out, ( sft23a[28..28].out, ( sft23a[27..27].out, ( sft23a[26..26].out, ( sft23a[25..25].out, ( sft23a[24..24].out, ( sft23a[23..23].out, ( sft23a[22..22].out, ( sft23a[21..21].out, ( sft23a[20..20].out, ( sft23a[19..19].out, ( sft23a[18..18].out, ( sft23a[17..17].out, ( sft23a[16..16].out, ( sft23a[15..15].out, ( sft23a[14..14].out, ( sft23a[13..13].out, ( sft23a[12..12].out, ( sft23a[11..11].out, ( sft23a[10..10].out, ( sft23a[9..9].out, ( sft23a[8..8].out, ( sft23a[7..7].out, ( sft23a[6..6].out, ( sft23a[5..5].out, ( sft23a[4..4].out, ( sft23a[3..3].out, ( sft23a[2..2].out, ( sft23a[1..1].out, ( sft23a[0..0].out, ( sft19a[1..1].out, ( sft19a[0..0].out, ( w1024w, cs1a[0].sout)))))))))))))))))))))))))))))))))))))))))))));
	sft15a[].in = add12_result[];
	sft17a[].in = ( w1024w, ( le2a[27..27].out, ( le2a[26..26].out, ( le2a[25..25].out, ( le2a[24..24].out, ( le2a[23..23].out, ( le2a[22..22].out, ( le2a[21..21].out, ( le2a[20..20].out, ( sft27a[29..29].out, ( sft27a[28..28].out, ( sft27a[27..27].out, ( sft27a[26..26].out, ( sft27a[25..25].out, ( sft27a[24..24].out, ( sft27a[23..23].out, ( sft27a[22..22].out, ( sft27a[21..21].out, ( sft27a[20..20].out, ( sft27a[19..19].out, ( sft27a[18..18].out, ( sft27a[17..17].out, ( sft27a[16..16].out, ( sft27a[15..15].out, ( sft27a[14..14].out, ( sft27a[13..13].out, ( sft27a[12..12].out, ( sft27a[11..11].out, ( sft27a[10..10].out, ( sft27a[9..9].out, ( sft27a[8..8].out, ( sft27a[7..7].out, ( sft27a[6..6].out, ( le9a[1..1].out, ( sft27a[4..4].out, ( le8a[1..1].out, ( le8a[0..0].out, ( le7a[1..1].out, ( le7a[0..0].out, ( le6a[1..1].out, ( le6a[0..0].out, ( le4a[3..2].out))))))))))))))))))))))))))))))))))))))))));
	sft18a[].in = ( w1024w, ( (! w882w[29..29]), ( le11a[28..28].out, ( le11a[27..27].out, ( sft27a[34..34].out, ( sft27a[33..33].out, ( sft27a[32..32].out, ( sft27a[31..31].out, ( sft27a[30..30].out, ( sft39a[23..23].out, ( sft31a[26..26].out, ( sft31a[25..25].out, ( sft31a[24..24].out, ( sft31a[23..23].out, ( sft31a[22..22].out, ( sft31a[21..21].out, ( sft31a[20..20].out, ( sft31a[19..19].out, ( sft31a[18..18].out, ( sft31a[17..17].out, ( sft31a[16..16].out, ( sft31a[15..15].out, ( sft31a[14..14].out, ( sft31a[13..13].out, ( sft31a[12..12].out, ( sft31a[11..11].out, ( sft31a[10..10].out, ( sft31a[9..9].out, ( sft31a[8..8].out, ( sft31a[7..7].out, ( sft31a[6..6].out, ( sft31a[5..5].out, ( sft31a[4..4].out, ( sft27a[5..5].out, ( sft31a[2..2].out, ( sft27a[3..3].out, ( sft27a[2..2].out, ( sft27a[1..1].out, ( sft27a[0..0].out, ( le5a[3..3].out, ( le5a[2..2].out, ( w1024w, cs1a[1].sout))))))))))))))))))))))))))))))))))))))))));
	sft19a[].in = add16_result[];
	sft21a[].in = ( w1024w, ( w971w, ( (! w793w[29..29]), ( le11a[26..26].out, ( le11a[25..25].out, ( le11a[24..24].out, ( sft39a[25..25].out, ( sft39a[24..24].out, ( sft31a[27..27].out, ( sft35a[24..24].out, ( sft35a[23..23].out, ( sft35a[22..22].out, ( sft35a[21..21].out, ( sft35a[20..20].out, ( sft35a[19..19].out, ( sft35a[18..18].out, ( sft35a[17..17].out, ( sft35a[16..16].out, ( sft35a[15..15].out, ( sft35a[14..14].out, ( sft35a[13..13].out, ( sft35a[12..12].out, ( sft35a[11..11].out, ( sft35a[10..10].out, ( sft35a[9..9].out, ( sft35a[8..8].out, ( sft35a[7..7].out, ( sft35a[6..6].out, ( sft35a[5..5].out, ( sft35a[4..4].out, ( sft35a[3..3].out, ( sft35a[2..2].out, ( sft31a[3..3].out, ( le9a[0..0].out, ( le7a[3..3].out, ( le7a[2..2].out, ( le6a[3..3].out, ( le6a[2..2].out, ( le4a[5..5].out, cs1a[2].sout)))))))))))))))))))))))))))))))))))))));
	sft22a[].in = ( w1024w, ( w1024w, ( sft27a[35..35].out, ( le10a[28..28].out, ( sft39a[27..27].out, ( sft39a[26..26].out, ( sft31a[29..29].out, ( sft31a[28..28].out, ( sft35a[25..25].out, ( sft39a[22..22].out, ( sft39a[21..21].out, ( sft39a[20..20].out, ( sft39a[19..19].out, ( sft39a[18..18].out, ( sft39a[17..17].out, ( sft39a[16..16].out, ( sft39a[15..15].out, ( sft39a[14..14].out, ( sft39a[13..13].out, ( sft39a[12..12].out, ( sft39a[11..11].out, ( sft39a[10..10].out, ( sft39a[9..9].out, ( sft39a[8..8].out, ( sft39a[7..7].out, ( sft39a[6..6].out, ( sft39a[5..5].out, ( sft39a[4..4].out, ( sft39a[3..3].out, ( sft39a[2..2].out, ( sft39a[1..1].out, ( sft39a[0..0].out, ( sft35a[1..1].out, ( sft35a[0..0].out, ( sft31a[1..1].out, ( sft31a[0..0].out, ( le5a[5..5].out, ( le5a[4..4].out, ( w1024w, le4a[4..4].out)))))))))))))))))))))))))))))))))))))));
	sft23a[].in = add20_result[];
	sft25a[].in = ( w1024w, ( w971w, ( le10a[27..27].out, ( le10a[26..26].out, ( le11a[23..23].out, ( le11a[22..22].out, ( le2a[19..19].out, ( le2a[18..18].out, ( le2a[17..17].out, ( le2a[16..16].out, ( le2a[15..15].out, ( le2a[14..14].out, ( le2a[13..13].out, ( le2a[12..12].out, ( le2a[11..11].out, ( le2a[10..10].out, ( le2a[9..9].out, ( le2a[8..8].out, ( le2a[7..7].out, ( le2a[6..6].out, ( le2a[5..5].out, ( le2a[4..4].out, ( le2a[3..3].out, ( le2a[2..2].out, ( le2a[1..1].out, ( le2a[0..0].out, ( le11a[1..1].out, ( le11a[0..0].out, ( le10a[1..1].out, ( le10a[0..0].out, ( le8a[3..3].out, ( le8a[2..2].out, ( le6a[5..5].out, ( le6a[4..4].out, ( le4a[7..6].out)))))))))))))))))))))))))))))))))));
	sft26a[].in = ( w1024w, ( w1024w, ( (! w704w[29..29]), ( le9a[28..28].out, ( le10a[25..25].out, ( le10a[24..24].out, ( le11a[21..21].out, ( le11a[20..20].out, ( le11a[19..19].out, ( sft43a[18..18].out, ( sft43a[17..17].out, ( sft43a[16..16].out, ( sft43a[15..15].out, ( sft43a[14..14].out, ( sft43a[13..13].out, ( sft43a[12..12].out, ( sft43a[11..11].out, ( sft43a[10..10].out, ( sft43a[9..9].out, ( sft43a[8..8].out, ( sft43a[7..7].out, ( sft43a[6..6].out, ( sft43a[5..5].out, ( sft43a[4..4].out, ( sft43a[3..3].out, ( sft43a[2..2].out, ( sft43a[1..1].out, ( sft43a[0..0].out, ( le9a[3..3].out, ( le9a[2..2].out, ( le7a[5..5].out, ( le7a[4..4].out, ( le5a[7..7].out, ( le5a[6..6].out, ( w1024w, cs1a[3].sout)))))))))))))))))))))))))))))))))));
	sft27a[].in = add24_result[];
	sft29a[].in = ( w1024w, ( w971w, ( le8a[27..27].out, ( le10a[22..22].out, ( le10a[21..21].out, ( le11a[18..18].out, ( le11a[17..17].out, ( le11a[16..16].out, ( le11a[15..15].out, ( le11a[14..14].out, ( le11a[13..13].out, ( le11a[12..12].out, ( le11a[11..11].out, ( le11a[10..10].out, ( le11a[9..9].out, ( le11a[8..8].out, ( le11a[7..7].out, ( le11a[6..6].out, ( le11a[5..5].out, ( le11a[4..4].out, ( le11a[3..3].out, ( le11a[2..2].out, ( le10a[3..3].out, ( le10a[2..2].out, ( le8a[5..5].out, ( le8a[4..4].out, ( le6a[7..7].out, ( le6a[6..6].out, ( le4a[9..9].out, cs1a[4].sout)))))))))))))))))))))))))))));
	sft30a[].in = ( w1024w, ( w1024w, ( (! w526w[29..29]), ( le9a[24..24].out, ( le9a[23..23].out, ( le10a[20..20].out, ( le10a[19..19].out, ( le10a[18..18].out, ( le10a[17..17].out, ( le10a[16..16].out, ( le10a[15..15].out, ( le10a[14..14].out, ( le10a[13..13].out, ( le10a[12..12].out, ( le10a[11..11].out, ( le10a[10..10].out, ( le10a[9..9].out, ( le10a[8..8].out, ( le10a[7..7].out, ( le10a[6..6].out, ( le10a[5..5].out, ( le10a[4..4].out, ( le9a[5..5].out, ( le9a[4..4].out, ( le7a[7..7].out, ( le7a[6..6].out, ( le5a[9..9].out, ( le5a[8..8].out, ( w1024w, le4a[8..8].out)))))))))))))))))))))))))))));
	sft31a[].in = add28_result[];
	sft33a[].in = ( w1024w, ( le8a[26..26].out, ( le8a[25..25].out, ( le9a[22..22].out, ( le9a[21..21].out, ( le9a[20..20].out, ( le9a[19..19].out, ( le9a[18..18].out, ( le9a[17..17].out, ( le9a[16..16].out, ( le9a[15..15].out, ( le9a[14..14].out, ( le9a[13..13].out, ( le9a[12..12].out, ( le9a[11..11].out, ( le9a[10..10].out, ( le9a[9..9].out, ( le9a[8..8].out, ( le9a[7..7].out, ( le9a[6..6].out, ( le8a[7..7].out, ( le8a[6..6].out, ( le6a[9..9].out, ( le6a[8..8].out, ( le4a[11..11].out, cs1a[5].sout)))))))))))))))))))))))));
	sft34a[].in = ( w1024w, ( le7a[28..28].out, ( le7a[27..27].out, ( le8a[24..24].out, ( sft47a[15..15].out, ( sft47a[14..14].out, ( sft47a[13..13].out, ( sft47a[12..12].out, ( sft47a[11..11].out, ( sft47a[10..10].out, ( sft47a[9..9].out, ( sft47a[8..8].out, ( sft47a[7..7].out, ( sft47a[6..6].out, ( sft47a[5..5].out, ( sft47a[4..4].out, ( sft47a[3..3].out, ( sft47a[2..2].out, ( sft47a[1..1].out, ( sft47a[0..0].out, ( le7a[9..9].out, ( le7a[8..8].out, ( le5a[11..11].out, ( le5a[10..10].out, ( w1024w, le4a[10..10].out)))))))))))))))))))))))));
	sft35a[].in = add32_result[];
	sft37a[].in = ( w1024w, ( w971w, ( le9a[27..27].out, ( le9a[26..26].out, ( le10a[23..23].out, ( w971w, ( (! w437w[29..29]), ( le7a[26..26].out, ( le8a[23..23].out, ( le8a[22..22].out, ( le8a[21..21].out, ( le8a[20..20].out, ( le8a[19..19].out, ( le8a[18..18].out, ( le8a[17..17].out, ( le8a[16..16].out, ( le8a[15..15].out, ( le8a[14..14].out, ( le8a[13..13].out, ( le8a[12..12].out, ( le8a[11..11].out, ( le8a[10..10].out, ( le8a[9..9].out, ( le8a[8..8].out, ( le6a[11..11].out, ( le6a[10..10].out, ( le4a[13..13].out, cs1a[6].sout)))))))))))))))))))))))))));
	sft38a[].in = ( w1024w, ( w1024w, ( (! w615w[29..29]), ( le8a[28..28].out, ( le9a[25..25].out, ( w1024w, ( sft43a[19..19].out, ( le6a[28..28].out, ( le7a[25..25].out, ( le7a[24..24].out, ( le7a[23..23].out, ( le7a[22..22].out, ( le7a[21..21].out, ( le7a[20..20].out, ( le7a[19..19].out, ( le7a[18..18].out, ( le7a[17..17].out, ( le7a[16..16].out, ( le7a[15..15].out, ( le7a[14..14].out, ( le7a[13..13].out, ( le7a[12..12].out, ( le7a[11..11].out, ( le7a[10..10].out, ( le5a[13..13].out, ( cs1a[7].sout, ( w1024w, le4a[12..12].out)))))))))))))))))))))))))));
	sft39a[].in = add36_result[];
	sft41a[].in = ( w1024w, ( w971w, ( le6a[27..27].out, ( le6a[26..26].out, ( le6a[25..25].out, ( le6a[24..24].out, ( le6a[23..23].out, ( le6a[22..22].out, ( le6a[21..21].out, ( le6a[20..20].out, ( le6a[19..19].out, ( le6a[18..18].out, ( le6a[17..17].out, ( le6a[16..16].out, ( le6a[15..15].out, ( le6a[14..14].out, ( le6a[13..13].out, ( le6a[12..12].out, ( le4a[15..15].out, le5a[12..12].out)))))))))))))))))));
	sft42a[].in = ( w1024w, ( w1024w, ( (! w362w[29..29]), ( le5a[28..28].out, ( le5a[27..27].out, ( le5a[26..26].out, ( le5a[25..25].out, ( le5a[24..24].out, ( le5a[23..23].out, ( le5a[22..22].out, ( le5a[21..21].out, ( le5a[20..20].out, ( le5a[19..19].out, ( le5a[18..18].out, ( le5a[17..17].out, ( le5a[16..16].out, ( le5a[15..15].out, ( le5a[14..14].out, ( w1024w, le4a[14..14].out)))))))))))))))))));
	sft43a[].in = add40_result[];
	sft45a[].in = ( w1024w, ( w971w, ( (! w284w[29..29]), ( le4a[28..28].out, ( le4a[27..27].out, ( le4a[26..26].out, ( le4a[25..25].out, ( le4a[24..24].out, ( le4a[23..23].out, ( le4a[22..22].out, ( le4a[21..21].out, ( le4a[20..20].out, ( le4a[19..19].out, ( le4a[18..18].out, ( le4a[17..17].out, w7w[16..16])))))))))))))));
	sft46a[].in = ( w1024w, ( w1024w, ( w971w, ( w1024w, ( w1024w, ( w1024w, ( w1024w, ( w1024w, ( w1024w, ( w1024w, ( w1024w, ( w1024w, ( w1024w, ( w1024w, ( w1024w, le4a[16..16].out)))))))))))))));
	sft47a[].in = add44_result[];
	dataa_node[] = ( datab[28..0]);
	datab_node[] = ( dataa[16..0]);
	final_result_node[] = ( w1863w[45..0]);
	result[] = ( final_result_node[45..0]);
	w1024w = B"0";
	w12w[] = le2a[].out;
	w1863w[] = ( sft15a[45..45].out, sft15a[44..44].out, sft15a[43..43].out, sft15a[42..42].out, sft15a[41..41].out, sft15a[40..40].out, sft15a[39..39].out, sft15a[38..38].out, sft15a[37..37].out, sft15a[36..36].out, sft15a[35..35].out, sft15a[34..34].out, sft15a[33..33].out, sft15a[32..32].out, sft15a[31..31].out, sft15a[30..30].out, sft15a[29..29].out, sft15a[28..28].out, sft15a[27..27].out, sft15a[26..26].out, sft15a[25..25].out, sft15a[24..24].out, sft15a[23..23].out, sft15a[22..22].out, sft15a[21..21].out, sft15a[20..20].out, sft15a[19..19].out, sft15a[18..18].out, sft15a[17..17].out, sft15a[16..16].out, sft15a[15..15].out, sft15a[14..14].out, sft15a[13..13].out, sft15a[12..12].out, sft15a[11..11].out, sft15a[10..10].out, sft15a[9..9].out, sft15a[8..8].out, sft15a[7..7].out, sft15a[6..6].out, sft15a[5..5].out, sft15a[4..4].out, sft15a[3..3].out, sft15a[2..2].out, sft15a[1..1].out, sft15a[0..0].out);
	w284w[] = le4a[].out;
	w362w[] = le5a[].out;
	w437w[] = le6a[].out;
	w526w[] = le7a[].out;
	w615w[] = le8a[].out;
	w704w[] = le9a[].out;
	w793w[] = le10a[].out;
	w7w[] = ( datab_node[16..16], datab_node[]);
	w882w[] = le11a[].out;
	w971w = B"1";
END;
--VALID FILE
